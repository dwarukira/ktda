# Generated by Django 2.2.4 on 2019-08-19 10:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ktda.students.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('desc', models.TextField(blank=True, null=True)),
                ('document', models.FileField(upload_to=ktda.students.models.upload_path_handler)),
                ('doc_type', models.IntegerField(choices=[(1, 'Conset form'), (2, 'Perfomance '), (3, 'application details'), (4, 'fee statement')], default=4)),
            ],
        ),
        migrations.CreateModel(
            name='Factory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('email', models.CharField(blank=True, max_length=128)),
                ('phone', models.CharField(blank=True, max_length=64)),
                ('address', models.CharField(blank=True, max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('name', models.CharField(max_length=64)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('student_id', models.CharField(db_index=True, default=ktda.students.models.make_id, max_length=50, unique=True)),
                ('name', models.CharField(max_length=64)),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('O', 'Others')], default='F', max_length=2)),
                ('kcpe', models.IntegerField()),
                ('kcse', models.CharField(blank=True, max_length=64, null=True)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(2013), ktda.students.models.max_value_current_year], verbose_name='year')),
                ('course_taken', models.CharField(max_length=64)),
                ('contact', models.CharField(blank=True, max_length=12)),
                ('guardian_contact', models.CharField(blank=True, max_length=12)),
                ('kcpe_index', models.CharField(blank=True, max_length=30, null=True, verbose_name='Index Number')),
                ('kcse_index', models.CharField(blank=True, max_length=30, null=True, verbose_name='Index')),
                ('factory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.Factory')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='students.School')),
                ('university', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='students', to='students.University')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('form', models.CharField(choices=[('1', 'FORM 1'), ('2', 'FORM 2'), ('3', 'FORM 3'), ('4', 'FORM 4')], default='1', max_length=2)),
                ('term', models.CharField(choices=[('1', 'TERM 1'), ('2', 'TERM 2'), ('3', 'TERM 3')], default='1', max_length=2)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(2013), ktda.students.models.max_value_current_year], verbose_name='year')),
                ('grade', models.CharField(max_length=4)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance', to='students.Document')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance', to='students.Student')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolFees',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('form', models.CharField(choices=[('1', 'FORM 1'), ('2', 'FORM 2'), ('3', 'FORM 3'), ('4', 'FORM 4')], default='1', max_length=2)),
                ('term', models.CharField(choices=[('1', 'TERM 1'), ('2', 'TERM 2'), ('3', 'TERM 3')], default='1', max_length=2)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(2013), ktda.students.models.max_value_current_year], verbose_name='year')),
                ('ammount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fee', to='students.Document')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee', to='students.Student')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='students.Student'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=30)),
                ('image', models.ImageField(default='images/users/user.png', upload_to='images/users')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
